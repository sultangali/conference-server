
import User from '../model/User.js'
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import config from 'config';
import Article from '../model/Article.js';
import {transliterate} from '../service/transliterate.js'
import { sendVerificationEmail } from '../service/emailService.js';
import { randomBytes } from "crypto";

const generatePassword = () => {
  const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
  let password = "";
  for (let i = 0; i < 8; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return password;
};

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ—Ç–æ–∫ –¥–ª—è —Å–æ–∞–≤—Ç–æ—Ä–æ–≤)
 */
export const registration = async (req, res) => {
  try {
    const {
      email,
      password,
      lastName,
      firstName,
      fatherName,
      phone,
      organization,
      position,
      rank,
      degree,
      coauthors = [], // üëà –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–∞–≤—Ç–æ—Ä–æ–≤, –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      section,
      articleTitle,
      checked,
      participationType,
      participationForm,
      articleFile,
      avatar,
      role // üëà –ú–æ–∂–µ—Ç –±—ã—Ç—å 'correspondent' –∏–ª–∏ 'coauthor'
    } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email
    const isEmailExist = await User.findOne({ email });
    if (isEmailExist) {
      return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
    }

    // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const salt = await bcrypt.genSalt(6);
    const hash = await bcrypt.hash(password, salt);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç)
    const userRole = role || "correspondent";

    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç)
    
    const correspondentLogin = `${transliterate(lastName)}${transliterate(firstName[0])}${transliterate(fatherName ? fatherName[0] : '')}`;

    // ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const verificationToken = randomBytes(32).toString("hex");

    const correspondent = new User({
      email,
      login: correspondentLogin,
      hashedPassword: password,
      lastname: lastName,
      firstname: firstName,
      fathername: fatherName,
      phone,
      organization,
      position,
      degree,
      rank,
      checked,
      section,
      verificationToken,
      participation_type: participationType,
      participation_form: participationForm,
      
      avatar,
      role: userRole,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞
    await correspondent.save();

    // –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ç—å—é, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç
    let article = null;
    if (userRole === "correspondent" && correspondent?.participation_type ===  "problem") {
      article = new Article({
        title: articleTitle,
        correspondent: correspondent._id,
        section: section,
        file_url: articleFile
      });
      await article.save();
    }

    // –°–æ–∑–¥–∞—ë–º —Å–æ–∞–≤—Ç–æ—Ä–æ–≤
    let createdCoauthors = [];
    for (const coauthor of coauthors) {
      const generatedPassword = generatePassword();
      const login = `${transliterate(coauthor.lastName)}${transliterate(coauthor.firstName[0])}${transliterate(coauthor.fatherName ? coauthor.fatherName[0] : '')}`;

      const coauthorUser = new User({
        email: `${login?.toLowerCase()}@auto.coauthor.com`, // –í—Ä–µ–º–µ–Ω–Ω—ã–π email (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
        login,
        hashedPassword: bcrypt.hashSync(generatedPassword, salt),
        correspondent: correspondent._id,
        lastname: coauthor.lastName,
        firstname: coauthor.firstName,
        fathername: coauthor.fatherName || "",
        organization: coauthor.organization,
        position: coauthor.position,
        degree: coauthor.degree,
        rank: coauthor.rank,
        checked,
        participation_form: coauthor.participationForm,
        correspondent_data: {
          firstname:  correspondent?.firstname,
          lastname: correspondent?.lastname,
          email: correspondent?.email
        },
        role: "coauthor",
      });

      await coauthorUser.save();
      // –≤–Ω–∏–∑—É —è –ø—ã—Ç–∞—é—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å
      createdCoauthors.push({
        _id: coauthorUser._id, // üëà –î–æ–±–∞–≤–ª—è–µ–º _id
        email: `${login}@auto.coauthor.com`, // –í—Ä–µ–º–µ–Ω–Ω—ã–π email (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
        hashedPassword: bcrypt.hashSync(generatedPassword, salt),
        lastname: coauthor.lastName,
        firstname: coauthor.firstName,
        fathername: coauthor.fatherName || "",
        organization: coauthor.organization,
        position: coauthor.position,
        degree: coauthor.degree,
        rank: coauthor.rank,
        participation_form: coauthor.participationForm,
        role: "coauthor",
        login,
        password: generatedPassword,
      });
    }

    correspondent.coauthors = createdCoauthors.map(({ _id, hashedPassword, ...coauthor }) => coauthor);
    await correspondent.save();
    

    // –ò—Å–∫–ª—é—á–∞–µ–º —Ö—ç—à –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–ª–∏–µ–Ω—Ç—É
    const { hashedPassword, ...userData } = correspondent._doc;

    await sendVerificationEmail(email, verificationToken);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { _id: correspondent._id, role: userRole },
      config.get("jwt_key"),
      { expiresIn: "1h" }
    );

    res.status(201).json({
      message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
      userData,
      article, // üëà –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      coauthors: createdCoauthors, // üëà –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏ —Å–æ–∞–≤—Ç–æ—Ä–æ–≤
      token,
    });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", error: error.message });
  }
};

// üìå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ª–æ–≥–∏–Ω)
export const login = async (req, res) => {
  try {
    const { login, password } = req.body;
    let user = await User.findOne({ email: login }) || await User.findOne({ login: login }).populate('user');

    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // if (!user.isVerified) {
    //   return res.status(403).json({ message: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º" });
    // }

    const isPasswordValid = await bcrypt.compare(password, user.hashedPassword);
    if (user.hashedPassword != password) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = jwt.sign({ _id: user._id }, config.get("jwt_key"), { expiresIn: "7d" });

    res.status(200).json({ user, token });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const me = async (req, res) => {
  try {
    const userId = req.userId;

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —Å—Ç–∞—Ç—å—é, –≥–¥–µ –æ–Ω –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç
    const user = await User.findById(userId).exec();

    const article = await Article.findOne({ correspondent:  user.role == "correspondent" ? userId : user.correspondent?._id }).exec();

    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä–æ–ª—å
    const { hashedPassword, ...userData } = user._doc;

    res.status(200).json({
      ...userData,
      article, // –¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—å—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∞–≤—Ç–æ—Ä–æ–≤
    });
  } catch (error) {
    res.status(500).json(error.message);
  }
};




export const update = async (req, res) => {
  try {
    const {
      fullname,
      phone,
      address
    } = req.body;

    const userId = req.userId;

    const user = await User.findById(userId);

    await User.updateOne(
      {
        _id: user._id,
      },
      {
        fullname,
        phone,
        address
      }
    );

    res.status(200).json({
      success: true,
    });
  } catch (error) {
    res.status(500).json(error.message);
  }
};

export const updateParticipationType = async (req, res) => {
  try {
    const { userId } = req.params;
    const { type } = req.query; // online, offline, mixed

    if (!["online", "offline", "mixed"].includes(type)) {
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —É—á–∞—Å—Ç–∏—è" });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    user.participation_form = type;
    await user.save();

    return res.send(`
      <h2>‚úÖ –§–æ—Ä–º–∞ —É—á–∞—Å—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</h2>
      <p>–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>${type === "online" ? "–û–Ω–ª–∞–π–Ω" : type === "offline" ? "–û—Ñ–ª–∞–π–Ω" : "–°–º–µ—à–∞–Ω–Ω—ã–π"}</b></p>
    `);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —É—á–∞—Å—Ç–∏—è:", error);
    return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
  }
};

export const getParticipants = async (req, res) => {
  try {
    const participants = await User.find({ checked: true }, "lastname firstname fathername organization position rank degree")
      .sort({ lastname: 1 });
    res.status(200).json(participants);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};


export const setStatus = async (req, res) => {
  try {
    const { id } = req.body;

    await User.updateOne(
      { _id: id },
      {
        status: "accepted",
      }
    );

    res.status(200).json({
      success: true,
    });
  } catch (error) {
    res.status(500).json(error.message);
  }
}

