import cron from "node-cron";
import User from "../model/User.js";
import { sendEmail } from "../service/mailSend.js";
import moment from "moment";

// üìå –í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã –∏ –∫–ª—é—á–∏ –¥–ª—è isNotified
const importantDates = [
  { date: "2025-03-15", event: "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –±–∞–∑–µ –ø—Ä–æ–±–ª–µ–º", type: "solve", key: "problemBase" },
  { date: "2025-06-01", event: "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (Solve)", type: "solve", key: "solveRegEnd" },
  { date: "2025-02-21", event: "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–µ–∑–¥–æ–º", type: "all", key: "beforeArrival" },
  { date: "2025-06-18", event: "–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", type: "all", key: "conferenceStart" },
];

// üìå –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º (—Ä–∞–∑ –≤ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É)
const checkAndSendEmails = async () => {
  const today = moment().startOf("day").toDate(); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏

  for (const event of importantDates) {
    if (moment(today).isSame(moment(event.date, "YYYY-MM-DD"), "day")) {
      console.log(`üì© –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É: ${event.event}`);

      let users = [];
      if (event.type === "solve") {
        users = await User.find({
          participation_type: "solve",
          isVerified: true,
          $or: [
            { [`isNotified.${event.key}`]: { $exists: false } },
            { [`isNotified.${event.key}`]: null }
          ]
        });
      } else {
        users = await User.find({
          isVerified: true,
          $or: [
            { [`isNotified.${event.key}`]: { $exists: false } },
            { [`isNotified.${event.key}`]: null }
          ]
        });
      }

      for (const user of users) {
        let emailContent = `<h2>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ: ${event.event}</h2><p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.firstname} ${user.lastname}!</p>`;

        if (event.type === "solve" && event.event === "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –±–∞–∑–µ –ø—Ä–æ–±–ª–µ–º") {
          emailContent += `<p>–°–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±–∞–∑–∞ –∑–∞–¥–∞—á –¥–ª—è —Ä–µ—à–µ–Ω–∏—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!</p>`;
        }

        if (event.event === "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–µ–∑–¥–æ–º") {
          emailContent += `
            <p>–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –∏–∑–º–µ–Ω–∏—Ç—Å—è –ª–∏ –≤–∞—à–∞ —Ñ–æ—Ä–º–∞ —É—á–∞—Å—Ç–∏—è.</p>
            <a href="http://localhost:5000/api/user/update-participation/${user._id}?type=online" style="background: green; color: white; padding: 10px; text-decoration: none;">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –û–Ω–ª–∞–π–Ω</a>
            <a href="http://localhost:5000/api/user/update-participation/${user._id}?type=offline" style="background: blue; color: white; padding: 10px; text-decoration: none;">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –û—Ñ–ª–∞–π–Ω</a>
            <a href="http://localhost:5000/api/user/update-participation/${user._id}?type=mixed" style="background: orange; color: white; padding: 10px; text-decoration: none;">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –°–º–µ—à–∞–Ω–Ω—ã–π</a>
            </br>
            `;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        await sendEmail(user.email, `–û–ø–æ–≤–µ—â–µ–Ω–∏–µ: ${event.event}`, emailContent);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
        await User.updateOne({ _id: user._id }, { [`isNotified.${event.key}`]: today });

        console.log(`‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${user.email} (—Å–æ–±—ã—Ç–∏–µ: ${event.event})`);
      }
    }
  }
};

// üìå –ó–∞–ø—É—Å–∫–∞–µ–º CRON-–∑–∞–¥–∞—á—É (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 08:00 —É—Ç—Ä–∞)
cron.schedule("* * * * *", async () => {
  console.log("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...");
  await checkAndSendEmails();
});
